import React, { useState, useEffect } from 'react';

const usePostForm = () => {
  const [postFormData, setPostFormData] = useState({
    Title: '',
    CoverImg: '',
    Description: '',
    Tags: '',
    Category: 0,
  });

  const [markdownData, setMarkdownData] = useState('');

  const [submittable, setSubmittable] = useState(false);

  const [error, setError] = useState({
    title: false,
    image: false,
    description: false,
    category: false,
    content: false,
  });

  const [focused, setFocused] = useState({
    title: false,
    description: false,
    category: false,
    content: false,
  });

  const focusHandler = (e) => {
    // switch (e.target.id) {
    //   case 'title':
    //     setFocused({
    //       ...focused,
    //       title: true,
    //     });
    //     break;
    //   case 'description': {
    //     setFocused({
    //       ...focused,
    //       description: true,
    //     });
    //     break;
    //   }
    //   case 'category': {
    //     setFocused({
    //       ...focused,
    //       category: true,
    //     });
    //     break;
    //   }
    //   default: {
    //     setFocused({
    //       ...focused,
    //       content: true,
    //     });
    //     break;
    //   }
    // }
  };

  useEffect(() => {
    console.log(postFormData);
  }, [postFormData]);

  const formUpdateHandler = (e) => {
    console.log('fire');
    if (e.type === 'click') {
      setPostFormData({
        ...postFormData,
        Category: e.target.value,
      });
    } else {
      switch (e.target.id) {
        case 'title': {
          console.log('change title');
          setPostFormData({
            ...postFormData,
            Title: e.target.value,
          });
          break;
        }
        case 'description': {
          setPostFormData({
            ...postFormData,
            Description: e.target.value,
          });
          break;
        }
        case 'tags': {
          setPostFormData({
            ...postFormData,
            Tags: e.target.value,
          });
          break;
        }
        default:
          setPostFormData({
            ...postFormData,
          });
      }
    }
  };

  const formValidator = async (formType) => {
    switch (formType) {
      case 'new': {
        break;
      }
      case 'edit': {
        console.log('in edit');
        if (postFormData.Title.trim().length === 0) {
          console.log('title error');
          setError({ ...error, title: true });
          break;
        }
        if (postFormData.Category === 0) {
          console.log('cate error');
          setError({ ...error, category: true });
          break;
        }
        if (postFormData.CoverImg.length === 0) {
          console.log('img error');
          setError({ ...error, image: true });
          break;
        }
        if (postFormData.Description.trim().length === 0) {
          console.log('desc error');
          setError({ ...error, description: true });
          break;
        }
        console.log('set true');
        setSubmittable(true);
        break;
      }
      default:
        console.log('Form Type error');
        break;
    }
  };

  return [
    postFormData,
    markdownData,
    error,
    setPostFormData,
    setMarkdownData,
    formUpdateHandler,
    focusHandler,
    formValidator,
  ] as const;
};
export default usePostForm;
